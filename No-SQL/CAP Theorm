Availablity:

This condition states that every request gets a response on success/failure. 
It can be achieved by replicating data across different machine. It means data will be available on multiple machine. 
Replication of data to all other node may or may not happen immediately if any changes are made on any node.
Every request resceives a (non-error) response - without guarantee that it contains the most recent write. OR
A each non failover node must execute queries
Availablity means the ability to access the cluster even if a node in the cluster goes down. The cluster as a whole should respond always.


Consistency:
It is achieved by updating several nodes. 
As soon as data is written/updated on any node, while reading the same data from other node should always give latest update of data.
Every read received the most recent write or an error.
Consistency means that data is the same across the cluster, so you can read or write from/to any node and get the same data.


Partition Tolerance:

Even if the connection among nodes are down then other 2 consistency and availablilty promises must be kept 
The system continues to operate despite an arbitarary number of messages being dropped(or delayed) by the network between nodes.

Partition tolerance means that the cluster continues to function even if there is a "partition" (communication break) 
between two nodes (both nodes are up, but can't communicate). All individual nodes are running and up and serve the cluster.


In order to get both availability and partition tolerance, you have to give up consistency. 
Consider if you have two nodes, X and Y, in a master-master setup. Now, there is a break between network communication 
between X and Y, so they can't sync updates. At this point you can either:
A) Allow the nodes to get out of sync (giving up consistency), or
B) Consider the cluster to be "down" (giving up availability)

All the combinations available are:

CA - data is consistent between all nodes - as long as all nodes are online - and you can read/write from any node and be sure that the data is the same, but if you ever develop a partition between nodes, the data will be out of sync (and won't re-sync once the partition is resolved).
CP - data is consistent between all nodes, and maintains partition tolerance (preventing data desync) by becoming unavailable when a node goes down.
AP - nodes remain online even if they can't communicate with each other and will resync data once the partition is resolved, but you aren't guaranteed that all nodes will have the same data (either during or after the partition)
You should note that CA systems don't practically exist (even if some systems claim to be so).

What does Eventual consistency mean: 
Eventual consistency is a characteristic of distributed computing systems such that the value for a specific data item will, 
given enough time without updates, be consistent across all nodes. 
Accordingly, the value across all nodes will be consistent with the last update that was made -- eventually.
Before enough time has elapsed without updates, however, the value may be inconsistent across multiple copies of the data. 
Eventual consistency is only acceptable for fault-tolerant applications.
In distributed computing environments, the CAP theorem postulates that it is impossible to simultaneously guarantee consistency,
availability and partition tolerance (CAP) and that administrators have to select the two out of three that are most important to them.
Eventual consistency is also known as optimistic replication. 

Reference:
https://towardsdatascience.com/cap-theorem-and-distributed-database-management-systems-5c2be977950e
https://www.w3resource.com/mongodb/nosql.php
https://whatis.techtarget.com/definition/eventual-consistency
